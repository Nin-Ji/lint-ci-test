name: run-textlint&markdownlint
on: 
  pull_request:
    types: [ opened, synchronize ]
    paths: [ 'contents/**/*.md' ]
jobs:
  run-textlint:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Switch to pull request branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup node with cache
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Install packages via packages.json
        run: npm install

      - name: Get changed Markdown files (in this PR)
        id: changed
        run: |
          base_sha=$(git merge-base origin/${{ github.event.pull_request.base.ref }} HEAD)
          echo "Base SHA: $base_sha"
          git diff --name-only "$base_sha" HEAD | grep '^contents/.*\.md$' > files.txt || true
          cat files.txt

      - name: Run textlint and markdownlint (with annotation)
        run: |
          rm -f .textlint.log .markdownlint.log
          error_found="no"

          if [ -s files.txt ]; then
            echo "Running textlint..."
            cat files.txt | xargs npx textlint | tee .textlint.log >/dev/null || true

            echo "Running markdownlint with JSON and annotations..."
            for file in $(cat files.txt); do
              echo "Linting $file"

              # 保存用：PR コメント表示用ログ
              npx markdownlint "$file" 2>> .markdownlint.log || true

              # アノテーション用 JSON 出力
              npx markdownlint "$file" --json > .mlint_tmp.json || true

              if [ ! -s .mlint_tmp.json ]; then
                continue
              fi

              jq -c '.[] | {
                  file: .fileName,
                  errors: .errors
                }' .mlint_tmp.json | while read -r item; do
                  file=$(echo "$item" | jq -r .file)  # ← 相対パスを保持
                  echo "$item" | jq -c '.errors[] | {
                    line: .lineNumber,
                    rule: .ruleNames[0],
                    message: .ruleDescription
                  }' | while read -r issue; do
                    line=$(echo "$issue" | jq -r .line)
                    rule=$(echo "$issue" | jq -r .rule)
                    msg=$(echo "$issue" | jq -r .message)

                    # 👇 realpath を使わずに相対パスのまま出力
                    echo "::warning file=$file,line=$line::${rule}: ${msg}"
                    error_found="yes"
                  done
              done
            done

            if [ "$error_found" = "yes" ]; then
              exit 1
            fi
          else
            echo "No matching .md files to lint."
          fi

      - name: Comment on PR if lint issues found
        run: |
          if [ -s .textlint.log ] || [ -s .markdownlint.log ]; then
            echo "### :policeman: Lint Report" > .body.txt

            if [ -s .textlint.log ]; then
              echo -e "\n#### textlint:\n" >> .body.txt
              cat .textlint.log >> .body.txt
            fi

            if [ -s .markdownlint.log ]; then
              echo -e "\n#### markdownlint:\n" >> .body.txt
              cat .markdownlint.log >> .body.txt
            fi

            cat .body.txt
            gh pr comment --body-file ./.body.txt "${URL}"
          else
            echo "No lint problems found."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          URL: ${{ github.event.pull_request.html_url }}