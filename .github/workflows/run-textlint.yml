name: run-textlint&markdownlint

on: 
  pull_request:
    types: [opened, synchronize]
    paths: ['contents/**/*.md']

jobs:
  run-textlint:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Switch to pull request branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup node with cache
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Install packages via packages.json
        run: npm install

      - name: Add markdownlint problem matcher
        uses: xt0rted/markdownlint-problem-matcher@v2

      - name: Get changed Markdown files (in this PR)
        id: changed
        run: |
          base_sha=$(git merge-base origin/${{ github.event.pull_request.base.ref }} HEAD)
          echo "Base SHA: $base_sha"
          git diff --name-only "$base_sha" HEAD | grep '^contents/.*\.md$' > files.txt || true
          cat files.txt

      - name: Run textlint and markdownlint with annotations
        run: |
          rm -f .textlint.log .markdownlint.log
          error_found="no"

          if [ -s files.txt ]; then
            echo "Running textlint..."
            for file in $(cat files.txt); do
              npx textlint --quiet --format json "$file" > .tlint_tmp.json || true
              jq -c '.[] | { filePath: .filePath, messages: .messages }' .tlint_tmp.json | while read -r item; do
                f=$(echo "$item" | jq -r .filePath)
                echo "$item" | jq -c '.messages[] | {line: .line, column: .column, message: .message, ruleId: .ruleId}' | while read -r issue; do
                  line=$(echo "$issue" | jq -r .line)
                  col=$(echo "$issue" | jq -r .column)
                  msg=$(echo "$issue" | jq -r .message)
                  rule=$(echo "$issue" | jq -r .ruleId)
                  echo "::error file=$f,line=$line,col=$col::${rule}: ${msg}"
                  echo "Error: $f:$line:$col ${msg} (${rule})" >> .textlint.log
                  error_found="yes"
                done
              done
            done

            echo "Running markdownlint..."
            cat files.txt | xargs npx markdownlint | sed 's/^/Error: /' | tee .markdownlint.log || true
          else
            echo "No matching .md files to lint."
          fi

      - name: Comment on PR if lint issues found
        run: |
          if [ -s .textlint.log ] || [ -s .markdownlint.log ]; then
            echo "### :policeman: Lint Report" > .body.txt

            if [ -s .textlint.log ]; then
              echo -e "\n#### textlint:\n" >> .body.txt
              cat .textlint.log >> .body.txt
            fi

            if [ -s .markdownlint.log ]; then
              echo -e "\n#### markdownlint:\n" >> .body.txt
              cat .markdownlint.log >> .body.txt
            fi

            cat .body.txt
            gh pr comment --body-file ./.body.txt "${URL}"
          else
            echo "No lint problems found."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          URL: ${{ github.event.pull_request.html_url }}
